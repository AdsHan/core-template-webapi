// <auto-generated />
using System;
using EntregaFutura.Repository.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntregaFutura.Repository.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EntregaFutura.Domain.Models.EntregaModel", b =>
                {
                    b.Property<int>("EntregaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataEncerramento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(90) CHARACTER SET utf8mb4")
                        .HasMaxLength(90);

                    b.Property<int?>("ObservacaoId")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VendedorId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("EntregaId");

                    b.HasIndex("ObservacaoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Entregas");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.ImagemModel", b =>
                {
                    b.Property<int>("ImagemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                        .HasMaxLength(300);

                    b.HasKey("ImagemId");

                    b.ToTable("Imagens");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.ListaPrecoModel", b =>
                {
                    b.Property<int>("ListaPrecoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataValidade")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(90) CHARACTER SET utf8mb4")
                        .HasMaxLength(90);

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ObservacaoId")
                        .HasColumnType("int");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<string>("VendedorId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ListaPrecoId");

                    b.HasIndex("ObservacaoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("ListasPreco");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.ListaPrecoProdutoModel", b =>
                {
                    b.Property<int>("ListaPrecoProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(90) CHARACTER SET utf8mb4")
                        .HasMaxLength(90);

                    b.Property<int?>("ListaPrecoModelListaPrecoId")
                        .HasColumnType("int");

                    b.Property<int?>("ObservacaoId")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(3,2)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("QuantidadeMinima")
                        .HasColumnType("decimal(8,3)");

                    b.HasKey("ListaPrecoProdutoId", "ProdutoId");

                    b.HasIndex("ListaPrecoModelListaPrecoId");

                    b.HasIndex("ObservacaoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ListasPrecoProduto");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.ObservacaoModel", b =>
                {
                    b.Property<int>("ObservacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(65000);

                    b.HasKey("ObservacaoId");

                    b.ToTable("Observacoes");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.PedidoItemModel", b =>
                {
                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ObservacaoId")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantidade")
                        .HasColumnType("decimal(8,3)");

                    b.Property<decimal>("ValorMercadoria")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("PedidoId", "ItemId");

                    b.HasIndex("ObservacaoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("PedidosItem");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.PedidoModel", b =>
                {
                    b.Property<int>("PedidoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClienteId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ObservacaoId")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorMercadoria")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("VendedorId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PedidoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ObservacaoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.ProdutoGrupoModel", b =>
                {
                    b.Property<int>("ProdutoGrupoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(90) CHARACTER SET utf8mb4")
                        .HasMaxLength(90);

                    b.Property<int?>("ObservacaoId")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentualDesconto")
                        .HasColumnType("decimal(3,2)");

                    b.Property<string>("Referencia")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<string>("VendedorId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ProdutoGrupoId");

                    b.HasIndex("ObservacaoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("ProdutosGrupo");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.ProdutoImagemModel", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<int>("ImagemId")
                        .HasColumnType("int");

                    b.HasKey("ProdutoId", "ImagemId");

                    b.HasIndex("ImagemId");

                    b.ToTable("ProdutosImagem");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.ProdutoModel", b =>
                {
                    b.Property<int>("ProdutoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(90) CHARACTER SET utf8mb4")
                        .HasMaxLength(90);

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ObservacaoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ProdutoGrupoId")
                        .HasColumnType("int");

                    b.Property<decimal>("QuantidadeMinima")
                        .HasColumnType("decimal(8,3)");

                    b.Property<string>("Referencia")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<string>("VendedorId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ProdutoId");

                    b.HasIndex("ObservacaoId");

                    b.HasIndex("ProdutoGrupoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.RegraModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.UsuarioModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Contato")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataUltimoAcesso")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(90) CHARACTER SET utf8mb4")
                        .HasMaxLength(90);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsAtivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsContratoAtivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ListaPrecoPadraoId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("ObservacaoId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("VendedorId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ListaPrecoPadraoId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("ObservacaoId");

                    b.HasIndex("VendedorId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.UsuarioRegraModel", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.EntregaModel", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.ObservacaoModel", "Observacao")
                        .WithMany()
                        .HasForeignKey("ObservacaoId");

                    b.HasOne("EntregaFutura.Domain.Models.UsuarioModel", "UsuarioVendedorModel")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.ListaPrecoModel", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.ObservacaoModel", "Observacao")
                        .WithMany()
                        .HasForeignKey("ObservacaoId");

                    b.HasOne("EntregaFutura.Domain.Models.UsuarioModel", "UsuarioVendedorModel")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.ListaPrecoProdutoModel", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.ListaPrecoModel", null)
                        .WithMany("ProdutosLista")
                        .HasForeignKey("ListaPrecoModelListaPrecoId");

                    b.HasOne("EntregaFutura.Domain.Models.ObservacaoModel", "Observacao")
                        .WithMany()
                        .HasForeignKey("ObservacaoId");

                    b.HasOne("EntregaFutura.Domain.Models.ProdutoModel", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.PedidoItemModel", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.ObservacaoModel", "Observacao")
                        .WithMany()
                        .HasForeignKey("ObservacaoId");

                    b.HasOne("EntregaFutura.Domain.Models.PedidoModel", null)
                        .WithMany("ItensPedido")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntregaFutura.Domain.Models.ProdutoModel", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.PedidoModel", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.UsuarioModel", "UsuarioClienteModel")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntregaFutura.Domain.Models.ObservacaoModel", "Observacao")
                        .WithMany()
                        .HasForeignKey("ObservacaoId");

                    b.HasOne("EntregaFutura.Domain.Models.UsuarioModel", "UsuarioVendedorModel")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.ProdutoGrupoModel", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.ObservacaoModel", "Observacao")
                        .WithMany()
                        .HasForeignKey("ObservacaoId");

                    b.HasOne("EntregaFutura.Domain.Models.UsuarioModel", "UsuarioVendedorModel")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.ProdutoImagemModel", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.ImagemModel", "Imagem")
                        .WithMany()
                        .HasForeignKey("ImagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntregaFutura.Domain.Models.ProdutoModel", "Produto")
                        .WithMany("Imagens")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.ProdutoModel", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.ObservacaoModel", "Observacao")
                        .WithMany()
                        .HasForeignKey("ObservacaoId");

                    b.HasOne("EntregaFutura.Domain.Models.ProdutoGrupoModel", "ProdutoGrupo")
                        .WithMany()
                        .HasForeignKey("ProdutoGrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntregaFutura.Domain.Models.UsuarioModel", "UsuarioVendedorModel")
                        .WithMany()
                        .HasForeignKey("VendedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.UsuarioModel", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.ListaPrecoModel", "ListaPreco")
                        .WithMany()
                        .HasForeignKey("ListaPrecoPadraoId");

                    b.HasOne("EntregaFutura.Domain.Models.ObservacaoModel", "Observacao")
                        .WithMany()
                        .HasForeignKey("ObservacaoId");

                    b.HasOne("EntregaFutura.Domain.Models.UsuarioModel", "UsuarioVendedorModel")
                        .WithMany()
                        .HasForeignKey("VendedorId");
                });

            modelBuilder.Entity("EntregaFutura.Domain.Models.UsuarioRegraModel", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.RegraModel", "Regra")
                        .WithMany("UsuarioRegras")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntregaFutura.Domain.Models.UsuarioModel", "Usuario")
                        .WithMany("UsuarioRegras")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.RegraModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.UsuarioModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.UsuarioModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EntregaFutura.Domain.Models.UsuarioModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
